// supabase/functions/generate-homework-feedback/index.ts (or your current path)
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.4';
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};
function isGroqLimitError(status, bodyText) {
  if (status === 429 || status === 403) return true;
  const text = (bodyText || "").toLowerCase();
  return text.includes("limit") || text.includes("quota") || text.includes("exceed");
}
serve(async (req)=>{
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }
  // We'll parse the body once and keep pending_feedback_id available to the catch block
  let parsedBody = null;
  try {
    parsedBody = await req.json();
    const { pending_feedback_id } = parsedBody;
    console.log('üìã Processing feedback request:', pending_feedback_id);
    if (!pending_feedback_id) {
      throw new Error('Missing pending_feedback_id');
    }
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const groqApiKey = Deno.env.get('GROQ_API_KEY');
    const openrouterApiKey = Deno.env.get('OPENROUTER_API_KEY');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    // 1. Get the pending feedback record
    const { data: feedbackRecord, error: fetchError } = await supabase.from('pending_homework_feedback').select('*').eq('id', pending_feedback_id).single();
    if (fetchError || !feedbackRecord) {
      console.error('‚ùå  Failed to fetch feedback record:', fetchError);
      throw new Error('Feedback record not found');
    }
    console.log('‚úÖ Feedback record found:', feedbackRecord);
    // Mark as processing started
    await supabase.from('pending_homework_feedback').update({
      processing_started_at: new Date().toISOString()
    }).eq('id', pending_feedback_id);
    // 2. Use the rich context_data instead of querying homework_progress
    const contextData = feedbackRecord.context_data;
    if (!contextData || !contextData.questions) {
      console.error('‚ùå No context data found');
      await supabase.from('pending_homework_feedback').update({
        processed: true,
        processed_at: new Date().toISOString(),
        error_message: 'No context data found in feedback record'
      }).eq('id', pending_feedback_id);
      throw new Error('No context data found');
    }
    console.log(`üìä Using rich context data with ${contextData.questions.length} detailed questions`);
    // 3. Create homework summary from context_data
    const totalQuestions = contextData.totalQuestions;
    const correctAnswers = contextData.correctAnswers;
    const accuracy = contextData.accuracyPercentage;
    const totalTime = contextData.totalTimeSeconds;
    const avgTime = contextData.averageTimePerQuestion;
    // Get failed questions
    const failedQuestions = contextData.questions.filter((q)=>!q.isCorrect);
    const questionsByType = {};
    contextData.questions.forEach((q)=>{
      const qType = q.questionType || 'unknown';
      if (!questionsByType[qType]) questionsByType[qType] = [];
      questionsByType[qType].push(q);
    });
    // Time statistics
    const fastQuestions = contextData.questions.filter((q)=>q.responseTimeSeconds && q.responseTimeSeconds < 30);
    const slowQuestions = contextData.questions.filter((q)=>q.responseTimeSeconds && q.responseTimeSeconds > 120);
    const showedSolutions = contextData.questions.filter((q)=>q.showedSolution).length;
    // 4. Prompt (unchanged)
    const prompt = `–í—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –∏ –¥–∞–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

**–î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï**: ${feedbackRecord.homework_name}

**–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´**:
- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}
- –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%
- –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor(totalTime / 60)} –º–∏–Ω ${totalTime % 60} —Å–µ–∫
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${avgTime} —Å–µ–∫
- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: ${showedSolutions}

**–†–ê–ó–ë–ò–í–ö–ê –ü–û –¢–ò–ü–ê–ú –í–û–ü–†–û–°–û–í**:
${Object.entries(questionsByType).map(([type, qs])=>{
      const correct = qs.filter((q)=>q.isCorrect).length;
      const avgTimeForType = qs.reduce((sum, q)=>sum + (q.responseTimeSeconds || 0), 0) / qs.length;
      return `- ${type}: ${correct}/${qs.length} –ø—Ä–∞–≤–∏–ª—å–Ω–æ (${Math.round(correct / qs.length * 100)}%), —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(avgTimeForType)} —Å–µ–∫`;
    }).join('\n')}

${failedQuestions.length > 0 ? `**–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö**:
${failedQuestions.slice(0, 8).map((q, i)=>`
${i + 1}. **–í–æ–ø—Ä–æ—Å ${q.questionNumber}**: ${q.questionText || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}
   **–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞**: "${q.userAnswer || '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª'}"
   **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**: "${q.correctAnswer}"
   **–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è**: ${q.responseTimeSeconds || '?'} —Å–µ–∫
   **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
   **–ù–∞–≤—ã–∫–∏**: ${q.skills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
   ${q.showedSolution ? 'üìñ _–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ_' : ''}
`).join('\n')}` : ''}

**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò**:
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (<30 —Å–µ–∫): ${fastQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
- –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (>2 –º–∏–Ω): ${slowQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
${slowQuestions.length > 0 ? `- –°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ${slowQuestions.map((q)=>`‚Ññ${q.questionNumber}`).join(', ')}` : ''}

**–ó–ê–î–ê–ù–ò–ï**:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –∏ –≤—ã—è–≤–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
2. –£–∫–∞–∂–∏—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã/–Ω–∞–≤—ã–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
4. –î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
5. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç
6. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é —É—á–µ–Ω–∏–∫–∞

–ë—É–¥—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ—à–µ–Ω–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–æ–≤.`;
    console.log('ü§ñ Generating AI feedback with Groq...');
    // 5. Primary: Groq API call (unchanged payload)
    const groqResp = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...groqApiKey ? {
          'Authorization': `Bearer ${groqApiKey}`
        } : {}
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          {
            role: 'system',
            content: '–í—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ KaTeX –¥–ª—è —Ñ–æ—Ä–º—É–ª: $...$ –¥–ª—è inline, $$...$$ –¥–ª—è display. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –æ—à–∏–±–∫–∞—Ö –∏ –¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      })
    });
    let feedbackMessage = null;
    if (!groqResp.ok) {
      const groqErrText = await groqResp.text().catch(()=>null);
      console.error('‚ùå Groq API error:', groqErrText || groqResp.statusText);
      // Fallback only when limit/quota reached
      if (isGroqLimitError(groqResp.status, groqErrText)) {
        if (!openrouterApiKey) {
          throw new Error('Groq quota reached, but OPENROUTER_API_KEY is not configured');
        }
        console.warn('‚ö†Ô∏è Groq limit reached ‚Äî falling back to OpenRouter (Gemini 2.5 Flash Lite)');
        const orResp = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${openrouterApiKey}`,
            'HTTP-Referer': 'https://egechat.ru',
            'X-Title': 'EGEChat Homework Feedback'
          },
          body: JSON.stringify({
            model: 'google/gemini-2.5-flash-lite-preview-09-2025',
            messages: [
              {
                role: 'system',
                content: '–í—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ KaTeX –¥–ª—è —Ñ–æ—Ä–º—É–ª: $...$ –¥–ª—è inline, $$...$$ –¥–ª—è display. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –æ—à–∏–±–∫–∞—Ö –∏ –¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.7,
            max_tokens: 2000
          })
        });
        if (!orResp.ok) {
          const orErrText = await orResp.text().catch(()=>null);
          console.error('‚ùå OpenRouter API error:', orErrText || orResp.statusText);
          throw new Error(`OpenRouter API error: ${orResp.status}`);
        }
        const orData = await orResp.json();
        feedbackMessage = orData.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å';
      } else {
        // Not a limit/quota error ‚Äî bubble it up as before
        throw new Error(`Groq API error: ${groqResp.status}`);
      }
    } else {
      // Groq OK
      const groqData = await groqResp.json();
      feedbackMessage = groqData.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å';
    }
    console.log('‚ú® AI feedback generated successfully');
    // Store chat context for follow-up discussions (unchanged)
    const chatContext = {
      homework_name: feedbackRecord.homework_name,
      total_questions: totalQuestions,
      correct_answers: correctAnswers,
      accuracy: accuracy,
      questions: contextData.questions.map((q)=>({
          number: q.questionNumber,
          text: q.questionText,
          user_answer: q.userAnswer,
          correct_answer: q.correctAnswer,
          is_correct: q.isCorrect
        }))
    };
    // 6. Update record with result (unchanged)
    const { error: updateError } = await supabase.from('pending_homework_feedback').update({
      processed: true,
      processed_at: new Date().toISOString(),
      feedback_message: feedbackMessage,
      chat_context: chatContext
    }).eq('id', pending_feedback_id);
    if (updateError) {
      console.error('‚ùå Failed to update feedback record:', updateError);
      throw updateError;
    }
    console.log('üíæ Feedback and chat context saved to database');
    return new Response(JSON.stringify({
      success: true,
      feedback_id: pending_feedback_id
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('‚ùå Error in generate-homework-feedback:', error);
    // Try to save error to database using the body we already parsed
    try {
      const pending_feedback_id = parsedBody?.pending_feedback_id;
      if (pending_feedback_id) {
        const supabaseUrl = Deno.env.get('SUPABASE_URL');
        const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
        const supabase = createClient(supabaseUrl, supabaseServiceKey);
        await supabase.from('pending_homework_feedback').update({
          processed: true,
          processed_at: new Date().toISOString(),
          error_message: error?.message || 'Unknown error'
        }).eq('id', pending_feedback_id);
      }
    } catch (saveError) {
      console.error('Failed to save error to database:', saveError);
    }
    return new Response(JSON.stringify({
      error: error?.message || 'Internal server error'
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
});
