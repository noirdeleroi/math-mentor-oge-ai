import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { pending_feedback_id } = await req.json();
    console.log('üìã Processing feedback request:', pending_feedback_id);

    if (!pending_feedback_id) {
      throw new Error('Missing pending_feedback_id');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const groqApiKey = Deno.env.get('GROQ_API_KEY');

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // 1. Get the pending feedback record
    const { data: feedbackRecord, error: fetchError } = await supabase
      .from('pending_homework_feedback')
      .select('*')
      .eq('id', pending_feedback_id)
      .single();

    if (fetchError || !feedbackRecord) {
      console.error('‚ùå Failed to fetch feedback record:', fetchError);
      throw new Error('Feedback record not found');
    }

    console.log('‚úÖ Feedback record found:', feedbackRecord);

    // Mark as processing started
    await supabase
      .from('pending_homework_feedback')
      .update({ processing_started_at: new Date().toISOString() })
      .eq('id', pending_feedback_id);

    // 2. Query homework_progress for session data
    const { data: sessionRows, error: sessionError } = await supabase
      .from('homework_progress')
      .select('*')
      .eq('user_id', feedbackRecord.user_id)
      .eq('homework_name', feedbackRecord.homework_name)
      .order('created_at', { ascending: true });

    if (sessionError || !sessionRows || sessionRows.length === 0) {
      console.error('‚ùå No homework data found:', sessionError);
      await supabase
        .from('pending_homework_feedback')
        .update({
          processed: true,
          processed_at: new Date().toISOString(),
          error_message: 'No homework data found for this session'
        })
        .eq('id', pending_feedback_id);
      
      throw new Error('No homework data found');
    }

    console.log(`üìä Found ${sessionRows.length} homework records`);

    // 3. Create homework summary (similar to homeworkAIFeedbackService)
    const totalQuestions = sessionRows.length;
    const correctAnswers = sessionRows.filter(row => row.is_correct).length;
    const accuracy = Math.round((correctAnswers / totalQuestions) * 100);
    
    const questionsByType: Record<string, any[]> = {};
    sessionRows.forEach(row => {
      const qType = row.question_type || 'unknown';
      if (!questionsByType[qType]) questionsByType[qType] = [];
      questionsByType[qType].push(row);
    });

    // Get question details for failed questions
    const failedQuestionIds = sessionRows
      .filter(row => !row.is_correct)
      .map(row => row.question_id)
      .slice(0, 5); // Limit to 5 to avoid huge prompts

    let questionDetails = [];
    if (failedQuestionIds.length > 0) {
      const { data: details } = await supabase.functions.invoke('get-homework-questions-details', {
        body: { question_ids: failedQuestionIds }
      });
      questionDetails = details?.questions || [];
    }

    // 4. Create prompt for Groq
    const prompt = `–í—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –∏ –¥–∞–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

**–î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï**: ${feedbackRecord.homework_name}

**–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´**:
- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}
- –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%

**–†–ê–ó–ë–ò–í–ö–ê –ü–û –¢–ò–ü–ê–ú –í–û–ü–†–û–°–û–í**:
${Object.entries(questionsByType).map(([type, qs]) => {
  const correct = qs.filter(q => q.is_correct).length;
  return `- ${type}: ${correct}/${qs.length} –ø—Ä–∞–≤–∏–ª—å–Ω–æ (${Math.round(correct/qs.length*100)}%)`;
}).join('\n')}

${questionDetails.length > 0 ? `**–ü–†–ò–ú–ï–†–´ –û–®–ò–ë–û–ö**:
${questionDetails.map((q, i) => `
${i + 1}. **–í–æ–ø—Ä–æ—Å**: ${q.problem_text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}
   **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**: ${q.answer}
   **–ù–∞–≤—ã–∫–∏**: ${q.skills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
   **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: ${q.difficulty || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
`).join('\n')}` : ''}

**–ó–ê–î–ê–ù–ò–ï**:
1. –î–∞–π—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –£–∫–∞–∂–∏—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–µ–Ω–∏–∫–∞
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã/–Ω–∞–≤—ã–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
4. –î–∞–π—Ç–µ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
5. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é —É—á–µ–Ω–∏–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏.`;

    console.log('ü§ñ Generating AI feedback with Groq...');

    // 5. Call Groq API
    const groqResponse = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${groqApiKey}`
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          {
            role: 'system',
            content: '–í—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ KaTeX –¥–ª—è —Ñ–æ—Ä–º—É–ª: $...$ –¥–ª—è inline, $$...$$ –¥–ª—è display.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1500
      })
    });

    if (!groqResponse.ok) {
      const errorText = await groqResponse.text();
      console.error('‚ùå Groq API error:', errorText);
      throw new Error(`Groq API error: ${groqResponse.status}`);
    }

    const groqData = await groqResponse.json();
    const feedbackMessage = groqData.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å';

    console.log('‚ú® AI feedback generated successfully');

    // 6. Update pending_homework_feedback with result
    const { error: updateError } = await supabase
      .from('pending_homework_feedback')
      .update({
        processed: true,
        processed_at: new Date().toISOString(),
        feedback_message: feedbackMessage
      })
      .eq('id', pending_feedback_id);

    if (updateError) {
      console.error('‚ùå Failed to update feedback record:', updateError);
      throw updateError;
    }

    console.log('üíæ Feedback saved to database');

    return new Response(
      JSON.stringify({ success: true, feedback_id: pending_feedback_id }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Error in generate-homework-feedback:', error);

    // Try to save error to database
    try {
      const { pending_feedback_id } = await req.json();
      if (pending_feedback_id) {
        const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
        const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
        const supabase = createClient(supabaseUrl, supabaseServiceKey);

        await supabase
          .from('pending_homework_feedback')
          .update({
            processed: true,
            processed_at: new Date().toISOString(),
            error_message: error.message || 'Unknown error'
          })
          .eq('id', pending_feedback_id);
      }
    } catch (saveError) {
      console.error('Failed to save error to database:', saveError);
    }

    return new Response(
      JSON.stringify({ error: error.message || 'Internal server error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
