
import { getChatCompletion, type Message as GroqMessage } from "./groqService";
import { getRandomMathProblem, getMathProblemById, getCategoryByCode, type MathProblem } from "./mathProblemsService";
import { toast } from "@/hooks/use-toast";

export interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  problemId?: string;
}

// Store current problem for follow-up questions
let currentProblem: MathProblem | null = null;

const formatProblemResponse = (problem: MathProblem): string => {
  const category = getCategoryByCode(problem.code);
  let response = `**–ó–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ: ${category}** (${problem.code})\n\n`;
  
  if (problem.problem_image) {
    response += `*[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω–æ]*\n\n`;
  }
  
  response += problem.problem_text + '\n\n';
  response += `–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Å–∫–∞–∂–∏:\n`;
  response += `‚Ä¢ "–ø–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç" - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n`;
  response += `‚Ä¢ "–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ" - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è\n`;
  response += `‚Ä¢ "–æ–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ" - –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è`;
  
  return response;
};

const handleHelpRequest = (userMessage: string): string | null => {
  if (!currentProblem) {
    return null;
  }
  
  const message = userMessage.toLowerCase();
  
  if (message.includes('–ø–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç') || message.includes('–æ—Ç–≤–µ—Ç')) {
    return `**–û—Ç–≤–µ—Ç:** ${currentProblem.answer}`;
  }
  
  if (message.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ') || message.includes('—Ä–µ—à–µ–Ω–∏–µ')) {
    return currentProblem.solution_text || "–†–µ—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
  
  if (message.includes('–æ–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ') || message.includes('–ø–æ–¥—Ä–æ–±–Ω–µ–µ') || message.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
    return currentProblem.solutiontextexpanded || currentProblem.solution_text || "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
  }
  
  return null;
};

const handleGapsRequest = (userMessage: string): string | null => {
  const message = userMessage.toLowerCase();
  
  if (message.includes('–º–æ–∏ –ø—Ä–æ–±–µ–ª—ã') || message.includes('–ø—Ä–æ–±–µ–ª—ã')) {
    return `<b>–ê–ª–µ–∫—Å–µ–π, —Ç—ã —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ —Å–≤–æ–∏ –ø—Ä–æ–±–µ–ª—ã ‚Äî —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ üí™</b><br><br>

–í–æ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —è –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã —á–∞—Å—Ç–æ –æ—à–∏–±–∞–µ—à—å—Å—è –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ <b>—Å—Ç–µ–ø–µ–Ω–∏ —Å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º</b>.<br><br>
üìå *–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª:*

**–°—Ç–µ–ø–µ–Ω–∏ —Å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ üß†**

–≠—Ç–æ —Å—Ç–µ–ø–µ–Ω–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å ‚Äî –¥—Ä–æ–±—å.  
–ù–∞–ø—Ä–∏–º–µ—Ä: $a^{\frac{1}{2}}$ –∏–ª–∏ $a^{-\frac{3}{4}}$

---

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å:**

$$a^{\frac{1}{n}} = \sqrt[n]{a}$$

$$a^{\frac{m}{n}} = \sqrt[n]{a^m} = \left(\sqrt[n]{a}\right)^m$$

$$a^{-\frac{m}{n}} = \frac{1}{a^{\frac{m}{n}}}$$

---

**–ü—Ä–∏–º–µ—Ä:**

$$9^{\frac{3}{2}} = \left(\sqrt{9}\right)^3 = 3^3 = 27$$

$$16^{\frac{3}{2}} = \left( \sqrt{16} \right)^3 = 4^3 = 64$$


üìò <a href="/textbook2" style="color:#10b981;">–ò–∑—É—á–∏ —Ç–µ–æ—Ä–∏—é ‚Üí</a><br>
üß† <a href="https://lovable.dev/projects/your-mcq-link" style="color:#10b981;">–ü—Ä–æ–π–¥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ç–µ—Å—Ç</a> ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ`;
  }
  
  return null;
};

const shouldFetchProblem = (userMessage: string): string | null => {
  const message = userMessage.toLowerCase();
  
  // Check for practice problem requests
  if (message.includes('–¥–∞–π –∑–∞–¥–∞—á') || message.includes('—Ö–æ—á—É –∑–∞–¥–∞—á') || 
      message.includes('–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á') || message.includes('–ø—Ä–∞–∫—Ç–∏–∫') ||
      message.includes('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫') || message.includes('—É–ø—Ä–∞–∂–Ω–µ–Ω')) {
    
    if (message.includes('–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫')) return '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞';
    if (message.includes('–∞–ª–≥–µ–±—Ä')) return '–∞–ª–≥–µ–±—Ä–∞';
    if (message.includes('–≥–µ–æ–º–µ—Ç—Ä–∏')) return '–≥–µ–æ–º–µ—Ç—Ä–∏—è';
    if (message.includes('–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫')) return '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞';
    
    return 'random';
  }
  
  return null;
};

const handleDatabaseOnlyMode = async (userMessage: string): Promise<string> => {
  // Check for help requests first
  const helpResponse = handleHelpRequest(userMessage);
  if (helpResponse) {
    return helpResponse;
  }
  
  // Check for problem requests
  const problemCategory = shouldFetchProblem(userMessage);
  if (problemCategory) {
    const requestedCategory = problemCategory === 'random' ? undefined : problemCategory;
    const problem = await getRandomMathProblem(requestedCategory);
    
    if (problem) {
      currentProblem = problem;
      return formatProblemResponse(problem);
    } else {
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.";
    }
  }
  
  // For any other input in database mode, provide standard database responses
  if (userMessage.toLowerCase().includes('–ø–æ–º–æ—â—å') || userMessage.toLowerCase().includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')) {
    return `–í —Ä–µ–∂–∏–º–µ "–ë–∞–∑–∞" —è –º–æ–≥—É:\n\n‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∫ –∑–∞–¥–∞—á–∞–º\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ –î–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É, —Å–∫–∞–∂–∏—Ç–µ "–¥–∞–π –∑–∞–¥–∞—á—É" –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É (–∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞).`;
  }
  
  // Default response for database mode
  return "–í —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã. –°–∫–∞–∂–∏—Ç–µ '–¥–∞–π –∑–∞–¥–∞—á—É' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç–µ–º—É.";
};

export const sendChatMessage = async (
  userMessage: Message,
  messageHistory: Message[],
  isDatabaseMode: boolean = false,
  userId: string,
  homeworkContext?: any
): Promise<Message> => {
  try {
    let responseText: string;
    
    if (isDatabaseMode) {
      // Handle database-only mode
      responseText = await handleDatabaseOnlyMode(userMessage.text);
    } else {
      // Check if user is asking about their gaps
      const gapsResponse = handleGapsRequest(userMessage.text);
      if (gapsResponse) {
        return {
          id: messageHistory.length + 2,
          text: gapsResponse,
          isUser: false,
          timestamp: new Date()
        };
      }
      
      // Check if user is asking for help with current problem
      const helpResponse = handleHelpRequest(userMessage.text);
      if (helpResponse) {
        return {
          id: messageHistory.length + 2,
          text: helpResponse,
          isUser: false,
          timestamp: new Date(),
          problemId: currentProblem?.question_id
        };
      }
      
      // Check if user wants a practice problem
      const problemCategory = shouldFetchProblem(userMessage.text);
      if (problemCategory) {
        const requestedCategory = problemCategory === 'random' ? undefined : problemCategory;
        const problem = await getRandomMathProblem(requestedCategory);
        
        if (problem) {
          currentProblem = problem;
          return {
            id: messageHistory.length + 2,
            text: formatProblemResponse(problem),
            isUser: false,
            timestamp: new Date(),
            problemId: problem.question_id
          };
        } else {
          return {
            id: messageHistory.length + 2,
            text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
            isUser: false,
            timestamp: new Date()
          };
        }
      }
      
      // For all other messages, send to AI for general math conversation
      const groqMessages = [...messageHistory, userMessage].map(msg => ({
        role: msg.isUser ? 'user' as const : 'assistant' as const,
        content: msg.text
      }));
      
      // Call Groq API for general conversation with homework context if available
      responseText = await getChatCompletion(groqMessages, userId, homeworkContext);
    }
    
    // Create and return AI message
    return {
      id: messageHistory.length + 2,
      text: responseText,
      isUser: false,
      timestamp: new Date(),
      problemId: currentProblem?.question_id
    };
  } catch (error) {
    console.error('Error getting response:', error);
    
    // Display more specific error message
    let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. ";
    
    if (error instanceof Error) {
      errorMessage += error.message;
    } else {
      errorMessage += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";
    }
    
    toast({
      title: "–û—à–∏–±–∫–∞",
      description: errorMessage,
      variant: "destructive"
    });
    
    // Return error message
    return {
      id: messageHistory.length + 2,
      text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. " + errorMessage,
      isUser: false,
      timestamp: new Date()
    };
  }
};
