import { getRandomMathProblem, getMathProblemById } from "@/services/mathProblemsService";
import { supabase } from "@/integrations/supabase/client";

// Groq API service for chat completions
export interface Message {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

// Helper: normalize text (—ë‚Üí–µ, lowercased)
const norm = (s: string) => (s || "").toLowerCase().replace(/—ë/g, "–µ");

// Enhanced system prompt for the math tutor
const SYSTEM_PROMPT: Message = {
  role: 'system',
  content: `You are "–Å–∂–∏–∫" (Hedgehog), a helpful and patient high school math teacher specializing in Russian OGE (–û–ì–≠) exam preparation. You explain math concepts step-by-step and adapt to the student's level. 

Key capabilities:
- Use LaTeX notation for mathematical expressions: inline math with \\(...\\) or $...$ and block math with \\[...\\] or $$...$$
- Keep responses in Russian language
- Break down complex topics into simple steps
- Answer general math questions and provide explanations
- Help students understand mathematical concepts

When user asks you to explain something "–∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É" (short and to the point), provide concise, focused explanations in 1-3 sentences maximum. Be direct and essential, avoiding lengthy elaborations.

You can discuss any math-related topics, explain formulas, solve problems, and provide educational guidance. When students need practice problems, they will be provided automatically from our database.

Remember: You are a patient, encouraging teacher who helps students learn mathematics effectively through conversation and explanation.`
};

// ---- Streaming path (OPTIONALLY with homeworkContext) ----
export async function streamChatCompletion(
  messages: Message[],
  homeworkContext?: any
): Promise<ReadableStream<Uint8Array> | null> {
  try {
    const fullMessages = buildMessagesWithContext(messages, homeworkContext, /*isStream*/ true);
    // Diagnostics (optional)
    try {
      console.log('[groq:stream] context?', Boolean(homeworkContext), 'payload bytes:', JSON.stringify(fullMessages).length);
    } catch { /* ignore */ }

    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { messages: fullMessages, stream: true }
    });
    if (error) {
      console.error('Groq function error (stream):', error);
      throw new Error(`Groq function error (stream): ${error.message}`);
    }
    return data;
  } catch (error) {
    console.error('Error streaming from Groq:', error);
    return null;
  }
}

// Extract last question ID like "(üìå ID –∑–∞–¥–∞—á–∏: xxx)" or "ID –∑–∞–¥–∞—á–∏: xxx"
function extractLastQuestionId(messages: Message[]): string | null {
  for (let i = messages.length - 1; i >= 0; i--) {
    const m = messages[i]?.content ?? "";
    const match = m.match(/id\s*–∑–∞–¥–∞—á–∏\s*:\s*([\w-]+)/i);
    if (match) return match[1];
  }
  return null;
}

export async function getChatCompletion(messages: Message[], homeworkContext?: any): Promise<string> {
  try {
    const lastMessageRaw = messages[messages.length - 1]?.content || "";
    const lastMessage = norm(lastMessageRaw);

    // ---- Step 1: Handle follow-up (answer/solution/details) locally ----
    const asksAnswer =
      lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç') || lastMessage.includes('–ø–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç');
    const asksSolution =
      lastMessage.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ') || lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ');
    const asksExplain =
      lastMessage.includes('–Ω–µ –ø–æ–Ω—è–ª') || lastMessage.includes('–æ–±—ä—è—Å–Ω–∏') || lastMessage.includes('–ø–æ–¥—Ä–æ–±–Ω–µ–µ');

    if (asksAnswer || asksSolution || asksExplain) {
      const questionId = extractLastQuestionId(messages);
      if (!questionId) return "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–≤—É—é.";

      const problem = await getMathProblemById(questionId);
      if (!problem) return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ ID.";

      if (asksAnswer) {
        return `üìå –û—Ç–≤–µ—Ç: **${problem.answer}**`;
      }
      if (asksSolution) {
        return problem.solution_text || "–†–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
      }
      if (asksExplain) {
        // —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ë–î
        return (problem as any).solutiontextexpanded || problem.solution_text || "–ü–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ—Ç.";
      }
    }

    // ---- Step 2: Handle new problem request locally ----
    const wantsProblem = ['–∑–∞–¥–∞—á—É', '–∑–∞–¥–∞—á–∫—É', '–∑–∞–¥–∞—á–∏', '—É–ø—Ä–∞–∂–Ω–µ–Ω', '–ø—Ä–∞–∫—Ç–∏–∫', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤']
      .some(s => lastMessage.includes(s));

    if (wantsProblem) {
      const catMap: Record<string, string> = {
        '–∞–ª–≥–µ–±—Ä': '–∞–ª–≥–µ–±—Ä–∞',
        '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫': '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞',
        '–≥–µ–æ–º–µ—Ç—Ä': '–≥–µ–æ–º–µ—Ç—Ä–∏—è',
        '–ø—Ä–∞–∫—Ç–∏—á': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      };
      const catKey = Object.keys(catMap).find(k => lastMessage.includes(k));
      const category = catKey ? catMap[catKey] : undefined;

      const problem = await getRandomMathProblem(category);
      if (problem) {
        const rawImage = typeof problem.problem_image === 'string'
          ? problem.problem_image.replace(/^\/+/, '')
          : undefined;

        const imageUrl = rawImage?.startsWith('http')
          ? rawImage
          : (rawImage ? `https://casohrqgydyyvcclqwqm.supabase.co/storage/v1/object/public/images/${rawImage}` : undefined);

        const imagePart = imageUrl ? `üñºÔ∏è ![–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageUrl})\n\n` : "";

        return `–í–æ—Ç –∑–∞–¥–∞—á–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *${category ?? '–û–±—â–µ–µ'}*:\n\n${imagePart}${problem.problem_text}\n\n(üìå ID –∑–∞–¥–∞—á–∏: ${problem.question_id})\n\n–ù–∞–ø–∏—à–∏ *–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç* –∏–ª–∏ *–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
      }
      return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.";
    }

    // ---- Step 3: Default to Groq completion (with optional homework context) ----
    const fullMessages = buildMessagesWithContext(messages, homeworkContext, /*isStream*/ false);

    // Diagnostics
    let payloadBytes = -1;
    try { payloadBytes = JSON.stringify(fullMessages).length; } catch { /* ignore */ }
    console.log('[groq] payload bytes:', payloadBytes, 'context?', Boolean(homeworkContext));

    // Call with context first
    let data, error;
    try {
      const res = await supabase.functions.invoke('groq-chat', {
        body: { messages: fullMessages, stream: false }
      });
      data = res.data;
      error = res.error;
    } catch (e: any) {
      console.error('[groq] invoke threw:', e);
      // Fallback: try without context
      const fallbackMessages: Message[] = [SYSTEM_PROMPT, ...messages];
      let fbBytes = -1;
      try { fbBytes = JSON.stringify(fallbackMessages).length; } catch { /* ignore */ }
      console.log('[groq] fallback payload bytes:', fbBytes);

      const fb = await supabase.functions.invoke('groq-chat', {
        body: { messages: fallbackMessages, stream: false }
      });
      if (fb.error) {
        console.error('[groq] fallback error:', fb.error);
        return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (fallback): ${fb.error.message ?? 'unknown'}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`;
      }
      const fbContent = fb?.data?.choices?.[0]?.message?.content;
      return fbContent ?? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (fallback –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.';
    }

    if (error) {
      console.error('[groq] function error:', error);
      // Surface the function error back to the user (useful while debugging)
      return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message ?? 'unknown'}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`;
    }

    const content = data?.choices?.[0]?.message?.content;
    if (!content) {
      console.warn('[groq] empty content:', data);
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.';
    }
    return content;

  } catch (error: any) {
    console.error('Chat completion error:', error);
    const msg = typeof error?.message === 'string' ? error.message : String(error ?? 'unknown');
    return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${msg}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`;
  }
}

/* -------------------- helpers -------------------- */

// Safely build messages with optional homeworkContext
function buildMessagesWithContext(messages: Message[], homeworkContext?: any, isStream: boolean = false): Message[] {
  // Always start with SYSTEM_PROMPT
  let fullMessages: Message[] = [SYSTEM_PROMPT, ...messages];

  if (!homeworkContext) return fullMessages;

  // Defensive copy to avoid non-serializable stuff
  let safeContext: any;
  try {
    safeContext = JSON.parse(JSON.stringify(homeworkContext));
  } catch (e) {
    console.warn('[groq] context JSON clone failed:', e);
    return fullMessages; // skip context if not serializable
  }

  // Limit questions (avoid token overflow)
  const questions: any[] = Array.isArray(safeContext.questions) ? safeContext.questions.slice(-10) : [];
  console.log('[groq] context summary:', {
    hasContext: true,
    questionsCount: questions.length,
    name: safeContext.homeworkName,
    acc: safeContext.accuracyPercentage
  });

  // Build questions block safely
  const questionsBlock = questions.length
    ? questions.map((q: any, i: number) => `
–í–æ–ø—Ä–æ—Å ${i + 1} (ID: ${q?.questionId ?? 'N/A'}):
  –¢–µ–∫—Å—Ç: ${truncate(q?.questionText, 400) || '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
  –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: ${String(q?.userAnswer ?? '–ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ')}
  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${String(q?.correctAnswer ?? '‚Äî')}
  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${q?.isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Number(q?.responseTimeSeconds ?? 0)}—Å
  –¢–∏–ø: ${String(q?.questionType ?? '‚Äî')}
  –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${String(q?.difficulty ?? '‚Äî')}
  –ù–∞–≤—ã–∫–∏: ${Array.isArray(q?.skills) && q.skills.length ? q.skills.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
  ${q?.showedSolution ? '‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ä–µ—à–µ–Ω–∏–µ' : ''}`.trim()).join('\n')
    : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–∞—Ö';

  const contextPrompt: Message = {
    role: 'system',
    content: `
–ö–û–ù–¢–ï–ö–°–¢ –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø (–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è):

–ù–∞–∑–≤–∞–Ω–∏–µ: ${String(safeContext.homeworkName ?? '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${Number(safeContext.completedQuestions ?? 0)}/${Number(safeContext.totalQuestions ?? 0)} –≤–æ–ø—Ä–æ—Å–æ–≤
–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${Number(safeContext.correctAnswers ?? 0)}
–¢–æ—á–Ω–æ—Å—Ç—å: ${Number(safeContext.accuracyPercentage ?? 0)}%
–û–±—â–µ–µ –≤—Ä–µ–º—è: ${Number(safeContext.totalTimeSeconds ?? 0)} —Å–µ–∫—É–Ω–¥
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${Number(safeContext.averageTimePerQuestion ?? 0)} —Å–µ–∫—É–Ω–¥

–î–ï–¢–ê–õ–ò –í–û–ü–†–û–°–û–í:
${questionsBlock}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–û–í:
- –ö–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫ —É–ø–æ–º–∏–Ω–∞–µ—Ç "–≤–æ–ø—Ä–æ—Å 3" –∏–ª–∏ "–∑–∞–¥–∞—á–∞ 5", –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ
- –û–±—ä—è—Å–Ω—è–π –ü–û–ß–ï–ú–£ –µ–≥–æ –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–æ—Å—è—Ç
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–æ–º–µ—Ä—É
- –ë—É–¥—å –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º
- –ü–æ–º–Ω–∏, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–µ—Ç–∞–ª—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –î–ó
- –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –ø–æ–∫–∞–∂–∏ –µ–µ —Ç–µ–∫—Å—Ç, –µ–≥–æ –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
`.trim()
  };

  // Insert SYSTEM_PROMPT, then context, then the rest of messages
  fullMessages = [SYSTEM_PROMPT, contextPrompt, ...messages];

  // Optional: guard final payload size (useful for debugging/hard limits)
  // const payloadSize = JSON.stringify(fullMessages).length;
  // console.log('LLM payload bytes:', payloadSize);

  return fullMessages;
}

// Truncate helper for long strings
function truncate(s: any, maxLen: number): string {
  const str = typeof s === 'string' ? s : String(s ?? '');
  return str.length > maxLen ? str.slice(0, maxLen - 1) + '‚Ä¶' : str;
}
