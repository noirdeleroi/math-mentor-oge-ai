
import { getRandomMathProblem, getMathProblemById } from "@/services/mathProblemsService";
import { supabase } from "@/integrations/supabase/client";

// Groq API service for chat completions
export interface Message {
  role: 'system' | 'user' | 'assistant'; 
  content: string;
}

// Enhanced system prompt for the math tutor
const SYSTEM_PROMPT: Message = {
  role: 'system',
  content: `You are "–Å–∂–∏–∫" (Hedgehog), a helpful and patient high school math teacher specializing in Russian OGE (–û–ì–≠) exam preparation. You explain math concepts step-by-step and adapt to the student's level. 

Key capabilities:
- Use LaTeX notation for mathematical expressions: inline math with \\(...\\) or $...$ and block math with \\[...\\] or $$...$$
- Keep responses in Russian language
- Break down complex topics into simple steps
- Answer general math questions and provide explanations
- Help students understand mathematical concepts

When user asks you to explain something "–∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É" (short and to the point), provide concise, focused explanations in 1-3 sentences maximum. Be direct and essential, avoiding lengthy elaborations.

You can discuss any math-related topics, explain formulas, solve problems, and provide educational guidance. When students need practice problems, they will be provided automatically from our database.

Remember: You are a patient, encouraging teacher who helps students learn mathematics effectively through conversation and explanation.`
};

export async function streamChatCompletion(messages: Message[]): Promise<ReadableStream<Uint8Array> | null> {
  try {
    const fullMessages = [SYSTEM_PROMPT, ...messages];

    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { messages: fullMessages, stream: true }
    });

    if (error) {
      console.error('Groq function error:', error);
      throw new Error(`Groq function error: ${error.message}`);
    }

    // The response should be a stream
    return data;
  } catch (error) {
    console.error('Error streaming from Groq:', error);
    return null;
  }
}

function extractLastQuestionId(messages: Message[]): string | null {
  for (let i = messages.length - 1; i >= 0; i--) {
    const match = messages[i].content.match(/ID –∑–∞–¥–∞—á–∏: ([\w-]+)/);
    if (match) return match[1];
  }
  return null;
}

export async function getChatCompletion(messages: Message[], homeworkContext?: any): Promise<string> {
  try {
    const lastMessage = messages[messages.length - 1]?.content.toLowerCase();

    // Step 1: Handle follow-up (answer/solution/details)
    if (lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç') || lastMessage.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ') || lastMessage.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
      const questionId = extractLastQuestionId(messages);
      if (!questionId) return "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–≤—É—é.";

      const problem = await getMathProblemById(questionId);
      if (!problem) return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ ID.";

      if (lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç')) {
        return `üìå –û—Ç–≤–µ—Ç: **${problem.answer}**`;
      }

      if (lastMessage.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ')) {
        return problem.solution_text || "–†–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
      }

      if (lastMessage.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
        return problem.solutiontextexpanded || "–ü–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ—Ç.";
      }
    }

    // Step 2: Handle new problem request
    if (lastMessage.includes('–∑–∞–¥–∞—á—É')) {
      let category: string | undefined = undefined;

      if (lastMessage.includes('–∞–ª–≥–µ–±—Ä')) category = '–∞–ª–≥–µ–±—Ä–∞';
      else if (lastMessage.includes('–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫')) category = '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞';
      else if (lastMessage.includes('–≥–µ–æ–º–µ—Ç—Ä')) category = '–≥–µ–æ–º–µ—Ç—Ä–∏—è';
      else if (lastMessage.includes('–ø—Ä–∞–∫—Ç–∏—á')) category = '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞';

      const problem = await getRandomMathProblem(category);

      if (problem) {
       
        const rawImage = problem.problem_image?.replace(/^\/+/, '');
        const imageUrl = rawImage?.startsWith('http')
          ? rawImage
          : `https://casohrqgydyyvcclqwqm.supabase.co/storage/v1/object/public/images/${rawImage}`;

        
        const imagePart = problem.problem_image ? `üñºÔ∏è ![–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageUrl})\n\n` : "";

        return `–í–æ—Ç –∑–∞–¥–∞—á–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *${category ?? '–û–±—â–µ–µ'}*:\n\n${imagePart}${problem.problem_text}\n\n(üìå ID –∑–∞–¥–∞—á–∏: ${problem.question_id})\n\n–ù–∞–ø–∏—à–∏ *–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç* –∏–ª–∏ *–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
      }

      return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.";
    }

    // Step 3: Default to Groq completion
    let fullMessages: Message[] = [SYSTEM_PROMPT, ...messages];
    
    // Inject homework context if available
    if (homeworkContext) {
      console.log('üí¨ Injecting homework context into AI prompt');
      
      const contextPrompt: Message = {
        role: 'system',
        content: `
–ö–û–ù–¢–ï–ö–°–¢ –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø (–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è):

–ù–∞–∑–≤–∞–Ω–∏–µ: ${homeworkContext.homeworkName || '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${homeworkContext.completedQuestions || 0}/${homeworkContext.totalQuestions || 0} –≤–æ–ø—Ä–æ—Å–æ–≤
–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${homeworkContext.correctAnswers || 0}
–¢–æ—á–Ω–æ—Å—Ç—å: ${homeworkContext.accuracyPercentage || 0}%
–û–±—â–µ–µ –≤—Ä–µ–º—è: ${homeworkContext.totalTimeSeconds || 0} —Å–µ–∫—É–Ω–¥
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${homeworkContext.averageTimePerQuestion || 0} —Å–µ–∫—É–Ω–¥

–î–ï–¢–ê–õ–ò –í–û–ü–†–û–°–û–í:
${homeworkContext.questions?.map((q: any, i: number) => `
–í–æ–ø—Ä–æ—Å ${i + 1} (ID: ${q.questionId}):
  –¢–µ–∫—Å—Ç: ${q.questionText || '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
  –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: ${q.userAnswer || '–ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ'}
  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${q.correctAnswer}
  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${q.isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${q.responseTimeSeconds || 0}—Å
  –¢–∏–ø: ${q.questionType}
  –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${q.difficulty}
  –ù–∞–≤—ã–∫–∏: ${q.skills?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
  ${q.showedSolution ? '‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ä–µ—à–µ–Ω–∏–µ' : ''}
`).join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–∞—Ö'}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–û–í:
- –ö–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫ —É–ø–æ–º–∏–Ω–∞–µ—Ç "–≤–æ–ø—Ä–æ—Å 3" –∏–ª–∏ "–∑–∞–¥–∞—á–∞ 5", –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ
- –û–±—ä—è—Å–Ω—è–π –ü–û–ß–ï–ú–£ –µ–≥–æ –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–æ—Å—è—Ç
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–æ–º–µ—Ä—É
- –ë—É–¥—å –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º
- –ü–æ–º–Ω–∏, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–µ—Ç–∞–ª—è–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –î–ó
- –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –ø–æ–∫–∞–∂–∏ –µ–µ —Ç–µ–∫—Å—Ç, –µ–≥–æ –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
`
      };
      
      fullMessages = [SYSTEM_PROMPT, contextPrompt, ...messages];
    }
    
    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { messages: fullMessages, stream: false }
    });

    if (error) {
      console.error('Groq function error:', error);
      throw new Error(`Groq function error: ${error.message}`);
    }

    return data.choices[0].message.content;
  } catch (error) {
    console.error('Chat completion error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.';
  }
}
