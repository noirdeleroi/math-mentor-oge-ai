import { supabase } from "@/integrations/supabase/client";
import { HomeworkStats } from "./homeworkFeedbackService";

interface QuestionDetails {
  question_id: string;
  problem_text?: string;
  solution_text?: string;
  solutiontextexpanded?: string;
  answer?: string;
  problem_image?: string;
  difficulty?: number;
  skills?: string;
  problem_number_type?: string | number;
}

interface HomeworkSessionData {
  session_id: string;
  user_id: string;
  homework_name?: string;
  questions: Array<{
    question_id: string;
    question_type: string;
    difficulty_level: number;
    skill_ids: number[];
    user_answer: string;
    correct_answer: string;
    is_correct: boolean;
    response_time_seconds: number;
    showed_solution: boolean;
    problem_number: number;
    // Enhanced with full question content
    problem_text?: string;
    solution_text?: string;
    solutiontextexpanded?: string;
    problem_image?: string;
  }>;
  summary: {
    total_questions: number;
    questions_completed: number;
    questions_correct: number;
    accuracy_percentage: number;
    total_time_minutes: number;
    average_time_per_question: number;
    skills_practiced: number[];
    difficulty_breakdown: Record<string, number>;
    solution_usage_rate: number;
  };
  completion_date: string;
}

export async function createHomeworkSummaryJSON(sessionData: any[]): Promise<HomeworkSessionData> {
  console.log('=== createHomeworkSummaryJSON called ===');
  console.log('üì• Total records received:', sessionData.length);
  console.log('üìã Sample records:', JSON.stringify(sessionData.slice(0, 2), null, 2));
  
  const questionRecords = sessionData.filter(record => record.question_id);
  const summaryRecord = sessionData.find(record => record.completion_status === 'completed');
  
  console.log(`üìä Question records: ${questionRecords.length}, Summary records: ${summaryRecord ? 1 : 0}`);
  console.log('üîë Question IDs:', questionRecords.map(r => r.question_id));
  
  const totalTime = questionRecords.reduce((sum, record) => sum + (record.response_time_seconds || 0), 0);
  const showedSolutionCount = questionRecords.filter(record => record.showed_solution).length;
  const skillsWorkedOn = [...new Set(questionRecords.flatMap(record => record.skill_ids || []))];
  
  const difficultyBreakdown = questionRecords.reduce((acc, record) => {
    const level = record.difficulty_level?.toString() || 'unknown';
    acc[level] = (acc[level] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // Fetch detailed question content from database
  const questionIds = questionRecords.map(record => record.question_id).filter(Boolean);
  console.log('üì§ Fetching details for question IDs:', questionIds);
  let questionDetailsMap: Record<string, QuestionDetails> = {};
  
  if (questionIds.length > 0) {
    try {
      console.log('üîÑ Calling get-homework-questions-details edge function...');
      const { data: questionDetailsResponse, error } = await supabase.functions.invoke('get-homework-questions-details', {
        body: { questionIds }
      });
      
      console.log('üì¶ Edge function response:', { 
        hasError: !!error, 
        questionCount: questionDetailsResponse?.questions?.length || 0 
      });
      
      if (error) {
        console.error('‚ùå Error from edge function:', error);
      } else if (questionDetailsResponse?.questions) {
        console.log(`‚úÖ Received ${questionDetailsResponse.questions.length} question details`);
        questionDetailsMap = questionDetailsResponse.questions.reduce((acc: Record<string, QuestionDetails>, q: QuestionDetails) => {
          acc[q.question_id] = q;
          return acc;
        }, {});
      } else {
        console.warn('‚ö†Ô∏è No questions in response');
      }
    } catch (error) {
      console.error('‚ùå Error fetching question details:', error);
    }
  } else {
    console.warn('‚ö†Ô∏è No question IDs to fetch');
  }

  const questions = questionRecords.map(record => {
    const details: QuestionDetails = questionDetailsMap[record.question_id] || {} as QuestionDetails;
    return {
      question_id: record.question_id,
      question_type: record.question_type || 'unknown',
      difficulty_level: record.difficulty_level || 1,
      skill_ids: record.skill_ids || [],
      user_answer: record.user_answer || '',
      correct_answer: record.correct_answer || '',
      is_correct: record.is_correct || false,
      response_time_seconds: record.response_time_seconds || 0,
      showed_solution: record.showed_solution || false,
      problem_number: record.problem_number || 0,
      // Enhanced with full question content
      problem_text: details.problem_text,
      solution_text: details.solution_text,
      solutiontextexpanded: details.solutiontextexpanded,
      problem_image: details.problem_image
    };
  });

  const questionsCompleted = summaryRecord?.questions_completed || questionRecords.length;
  const questionsCorrect = summaryRecord?.questions_correct || questionRecords.filter(r => r.is_correct).length;
  const accuracy = questionsCompleted > 0 ? (questionsCorrect / questionsCompleted) * 100 : 0;

  return {
    session_id: sessionData[0]?.session_id || '',
    user_id: sessionData[0]?.user_id || '',
    homework_name: sessionData[0]?.homework_name || '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
    questions,
    summary: {
      total_questions: summaryRecord?.total_questions || questionRecords.length,
      questions_completed: questionsCompleted,
      questions_correct: questionsCorrect,
      accuracy_percentage: Math.round(accuracy),
      total_time_minutes: Math.round(totalTime / 60),
      average_time_per_question: questionRecords.length > 0 ? Math.round(totalTime / questionRecords.length) : 0,
      skills_practiced: skillsWorkedOn,
      difficulty_breakdown: difficultyBreakdown,
      solution_usage_rate: questionsCompleted > 0 ? Math.round((showedSolutionCount / questionsCompleted) * 100) : 0
    },
    completion_date: sessionData[0]?.completed_at || new Date().toISOString()
  };
}

export async function generateAIHomeworkFeedback(sessionData: any[]): Promise<string> {
  try {
    console.log('üîÑ Starting AI feedback generation for session data:', sessionData.length, 'records');
    const homeworkJSON = await createHomeworkSummaryJSON(sessionData);
    console.log('üìù Created homework JSON summary:', homeworkJSON);
    
    // Create specialized system prompt for homework feedback with access to question content
    const systemPrompt = `–¢—ã "–Å–∂–∏–∫" - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –û–ì–≠.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º –∏ –¥–∞—Ç—å –ü–ï–†–°–û–ù–ê–õ–¨–ù–£–Æ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤–∫–ª—é—á–∞—è:
- –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (problem_text)
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (solution_text –∏ solutiontextexpanded)
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
- –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
- –ë—ã–ª–æ –ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–µ—à–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ä–µ—à–µ–Ω–∏–∏
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é
- –í—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º

–í–∞–∂–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –û–±—ä—è—Å–Ω—è–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
- –û—Ç–º–µ—á–∞–π –∫–∞–∫ —É—Å–ø–µ—Ö–∏, —Ç–∞–∫ –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª—å—à–µ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ—à–∏–±–æ–∫
3. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é
5. –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ

–û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —Ç—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –ª–∏—á–Ω–æ —Å —É—á–µ–Ω–∏–∫–æ–º. –ú–∞–∫—Å–∏–º—É–º 12-15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.`;

    const userMessage = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:

${JSON.stringify(homeworkJSON, null, 2)}

–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`;

    console.log('üì§ Calling groq-chat edge function...');
    // Call Groq API for AI-generated feedback
    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { 
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userMessage }
        ], 
        stream: false 
      }
    });

    if (error) {
      console.error('‚ùå Error from groq-chat edge function:', error);
      throw new Error(`AI feedback error: ${error.message}`);
    }

    console.log('‚úÖ Received response from groq-chat');
    const feedbackContent = data.choices[0].message.content;
    console.log('üì® AI feedback content length:', feedbackContent.length);
    return feedbackContent;
  } catch (error) {
    console.error('Error in generateAIHomeworkFeedback:', error);
    // Fallback to original feedback service
    const { generateHomeworkFeedback, createHomeworkStatsFromData } = await import('./homeworkFeedbackService');
    const stats = createHomeworkStatsFromData(sessionData);
    return generateHomeworkFeedback(stats);
  }
}