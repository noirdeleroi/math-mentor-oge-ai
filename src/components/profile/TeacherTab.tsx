import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Star, MapPin, Clock, Users, MessageCircle, X } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";

interface Teacher {
  id: string;
  name: string;
  avatar: string;
  rating: number;
  experience: number;
  specialization: string[];
  location: string;
  hourlyRate: number;
  studentsCount: number;
  description: string;
  availability: string;
}

const aiTutors: Teacher[] = [
  {
    id: "1",
    name: "–Å–∂–∏–∫",
    avatar: "https://kbaazksvkvnafrwtmkcw.supabase.co/storage/v1/object/public/avatars/egik.png",
    rating: 4.9,
    experience: 1000,
    specialization: ["–û–ì–≠", "–ï–ì–≠", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è"],
    location: "–û–Ω–ª–∞–π–Ω",
    hourlyRate: 0,
    studentsCount: 50000,
    description:
      "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ü—Ä–µ–≤—Ä–∞—â–∞—é —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏.",
    availability: "24/7",
  },
  {
    id: "2",
    name: "–ö–µnji",
    avatar: "https://kbaazksvkvnafrwtmkcw.supabase.co/storage/v1/object/public/avatars/anime_guy.png",
    rating: 4.8,
    experience: 500,
    specialization: ["–ï–ì–≠", "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–õ–æ–≥–∏–∫–∞"],
    location: "–û–Ω–ª–∞–π–Ω",
    hourlyRate: 0,
    studentsCount: 25000,
    description:
      "–°—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π AI-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —á–µ—Ç–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.",
    availability: "24/7",
  },
  {
    id: "3",
    name: "–°–∞–∫—É—Ä–∞",
    avatar: "https://kbaazksvkvnafrwtmkcw.supabase.co/storage/v1/object/public/avatars/anime_girl.png",
    rating: 4.7,
    experience: 300,
    specialization: ["–û–ì–≠", "–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    location: "–û–Ω–ª–∞–π–Ω",
    hourlyRate: 0,
    studentsCount: 30000,
    description:
      "–í–µ—Å–µ–ª–∞—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è AI-—É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞. –ü–æ–º–æ–≥–∞—é –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏ –¥–µ–ª–∞—é –æ–±—É—á–µ–Ω–∏–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º!",
    availability: "24/7",
  },
];

export const TeacherTab = () => {
  const [selectedTeacher, setSelectedTeacher] = useState<string | null>(null);
  const [showThankYouModal, setShowThankYouModal] = useState<boolean>(false);
  const [selectedTutorMessage, setSelectedTutorMessage] = useState<string>("");
  const { user } = useAuth();

  const getTutorMessage = (teacherId: string) => {
    switch (teacherId) {
      case "1":
        return "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—é–±–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ —Å–¥–µ–ª–∞—é –æ–±—É—á–µ–Ω–∏–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. –í–º–µ—Å—Ç–µ –º—ã –¥–æ—Å—Ç–∏–≥–Ω–µ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! ü¶î";
      case "2":
        return "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤—ã–±–æ—Ä! –Ø –Ω–∞—É—á—É –≤–∞—Å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é. –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —É–ø–æ—Ä—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!";
      case "3":
        return "–£—Ä–∞! –ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è! –ú—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º. –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤–µ—Å–µ–ª—ã–º! ‚ú®";
      default:
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!";
    }
  };

  // ‚úÖ UPDATED FUNCTION: saves both tutor_avatar_url and tutor_name
  const handleSelectTeacher = async (teacherId: string) => {
    if (!user) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
        variant: "destructive",
      });
      return;
    }

    const selectedTutor = aiTutors.find((tutor) => tutor.id === teacherId);
    if (!selectedTutor) return;

    try {
      // Update tutor_avatar_url, tutor_name, and tutor_id in profiles table
      const { error } = await supabase
        .from("profiles")
        .update({
          tutor_avatar_url: selectedTutor.avatar,
          tutor_name: selectedTutor.name,
          tutor_id: selectedTutor.id,
        })
        .eq("user_id", user.id);

      if (error) {
        console.error("Error updating tutor selection:", error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
          variant: "destructive",
        });
        return;
      }

      setSelectedTeacher(teacherId);
      setSelectedTutorMessage(getTutorMessage(teacherId));
      setShowThankYouModal(true);

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedTutor.name} –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–≤–æ–µ–≥–æ AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞`,
      });
    } catch (error) {
      console.error("Unexpected error:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">–í—ã–±–æ—Ä AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</h2>
        <p className="text-gray-600">
          –í—ã–±–µ—Ä–∏—Ç–µ AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é –æ–±—É—á–µ–Ω–∏—è
        </p>
      </div>

      <div className="grid gap-6">
        {aiTutors.map((teacher) => (
          <Card
            key={teacher.id}
            className={`transition-all duration-200 hover:shadow-lg cursor-pointer ${
              selectedTeacher === teacher.id ? "ring-2 ring-primary" : ""
            }`}
            onClick={() => handleSelectTeacher(teacher.id)}
          >
            <CardHeader>
              <div className="flex items-start gap-4">
                <Avatar className="w-16 h-16">
                  <AvatarImage src={teacher.avatar} alt={teacher.name} />
                  <AvatarFallback>
                    {teacher.name.split(" ").map((n) => n[0]).join("")}
                  </AvatarFallback>
                </Avatar>

                <div className="flex-1">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-xl">{teacher.name}</CardTitle>
                    <div className="flex items-center gap-1">
                      <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                      <span className="font-semibold">{teacher.rating}</span>
                    </div>
                  </div>

                  <div className="flex items-center gap-4 mt-2 text-sm text-gray-600">
                    <div className="flex items-center gap-1">
                      <Clock className="w-4 h-4" />
                      <span>{teacher.experience} –ª–µ—Ç –æ–ø—ã—Ç–∞</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <MapPin className="w-4 h-4" />
                      <span>{teacher.location}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Users className="w-4 h-4" />
                      <span>{teacher.studentsCount} —É—á–µ–Ω–∏–∫–æ–≤</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2 mt-3">
                    {teacher.specialization.map((spec) => (
                      <Badge key={spec} variant="secondary" className="text-xs">
                        {spec}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardHeader>

            <CardContent>
              <p className="text-gray-700 mb-4">{teacher.description}</p>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <div className="text-sm text-gray-600">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</div>
                  <div className="text-sm font-medium">{teacher.availability}</div>
                </div>

                <div className="text-right space-y-1">
                  <div className="text-2xl font-bold text-primary">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
                  <div className="text-sm text-gray-600">–≤—Å–µ–≥–¥–∞</div>
                </div>
              </div>

              <div className="flex gap-3 mt-4">
                <Button
                  className="flex-1"
                  variant={selectedTeacher === teacher.id ? "default" : "outline"}
                >
                  {selectedTeacher === teacher.id ? "–í—ã–±—Ä–∞–Ω" : "–í—ã–±—Ä–∞—Ç—å"}
                </Button>
                <Button variant="outline" size="icon">
                  <MessageCircle className="w-4 h-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {selectedTeacher && (
        <Card className="bg-gradient-to-r from-primary/10 to-purple-100 border-primary/20">
          <CardContent className="p-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-2">AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω!</h3>
              <p className="text-gray-600 mb-4">
                –¢–µ–ø–µ—Ä—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
              </p>
              <Button className="w-full sm:w-auto">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</Button>
            </div>
          </CardContent>
        </Card>
      )}

      <Dialog open={showThankYouModal} onOpenChange={setShowThankYouModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <span>–í–∞—à AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</span>
              <Button variant="ghost" size="icon" onClick={() => setShowThankYouModal(false)}>
                <X className="h-4 w-4" />
              </Button>
            </DialogTitle>
          </DialogHeader>
          <div className="text-center space-y-4 py-4">
            {selectedTeacher && (
              <>
                <Avatar className="w-20 h-20 mx-auto">
                  <AvatarImage
                    src={aiTutors.find((t) => t.id === selectedTeacher)?.avatar}
                    alt="–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
                  />
                  <AvatarFallback>
                    {aiTutors.find((t) => t.id === selectedTeacher)?.name[0]}
                  </AvatarFallback>
                </Avatar>
                <div className="space-y-2">
                  <h3 className="text-lg font-semibold">
                    {aiTutors.find((t) => t.id === selectedTeacher)?.name}
                  </h3>
                  <p className="text-gray-600 leading-relaxed">{selectedTutorMessage}</p>
                </div>
                <Button className="w-full" onClick={() => setShowThankYouModal(false)}>
                  –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
                </Button>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};
