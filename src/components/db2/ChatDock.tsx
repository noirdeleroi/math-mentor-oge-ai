import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import ChatMessages from "@/components/chat/ChatMessages";
import ChatInput from "@/components/chat/ChatInput";
import { sendChatMessage } from "@/services/chatService";
import { useChatContext } from "@/contexts/ChatContext";
import { useAuth } from "@/contexts/AuthContext";
import { useProfile } from "@/hooks/useProfile";
import { useStudentSkills } from "@/hooks/useStudentSkills";
import { useEffect } from "react";
import { motion } from "framer-motion";

const ChatDock = () => {
  const { messages, isTyping, isDatabaseMode, setMessages, setIsTyping, addMessage } = useChatContext();
  const { user } = useAuth();
  const { getDisplayName } = useProfile();
  const { topicProgress, generalPreparedness, isLoading } = useStudentSkills();
  const userName = getDisplayName();

  // Initialize welcome messages exactly like in Dashboard
  useEffect(() => {
    if (messages.length === 0 && !isLoading && topicProgress.length > 0) {
      // Find topics that need improvement (below 70%)
      const topicsToImprove = topicProgress
        .filter(topic => topic.averageScore < 70)
        .sort((a, b) => a.averageScore - b.averageScore)
        .slice(0, 3);

      let welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞. `;
      
      if (generalPreparedness >= 80) {
        welcomeMessage += `–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É –Ω–∞ –û–ì–≠. üéØ`;
      } else if (generalPreparedness >= 60) {
        welcomeMessage += `–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
      } else {
        welcomeMessage += `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üìö`;
      }

      let recommendationMessage = "";
      
      if (topicsToImprove.length > 0) {
        recommendationMessage = `**–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏:**\n\n`;
        
        topicsToImprove.forEach((topic, index) => {
          const topicNumber = topic.topic;
          recommendationMessage += `${index + 1}. **${topic.name}** (${topic.averageScore}%)\n`;
          recommendationMessage += `   üìñ [–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª](/textbook?topic=${topicNumber})\n\n`;
        });

        recommendationMessage += `–ù–∞—á–Ω–∏ —Å –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º. –£–¥–∞—á–∏! üöÄ`;
      } else {
        recommendationMessage = `üìå –í—á–µ—Ä–∞ —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–º—É <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤</b> ‚Äî –∫—Ä–∞—Å–∞–≤—á–∏–∫!  
–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ç–µ–º–æ–π:  
üìù <a href="/mcq-practice-skill-120" style="color: #10b981; text-decoration: underline;">–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</a>

<br> 
üî• –ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ! –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å: <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–æ–±–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤</b>

–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –Ω–µ–º–∞–ª–æ —Ç–µ–º ‚Äî –¥–≤–∏–∂–µ–º—Å—è –ø–æ –ø–ª–∞–Ω—É –∫–∞–∫ –ø–æ —Ä–µ–ª—å—Å–∞–º üöÇ  
–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç–µ–º–∞ –≤–∞–∂–Ω–∞—è –∏ —á–∞—Å—Ç–∞—è –≤ –û–ì–≠, —Ç–∞–∫ —á—Ç–æ —Ä–∞–∑–ª–æ–∂–∏–º –≤—Å—ë –ø–æ –ø–æ–ª–æ—á–∫–∞–º:

üìò <a href="/triangle-similarity" style="color: #10b981; text-decoration: underline;">–ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é</a> ‚Äî —Ä–∞–∑–±–µ—Ä–∏—Å—å –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –∏ –æ—Å–Ω–æ–≤–∞—Ö  
üé• <a href="/triangle-similarity-video" style="color: #10b981; text-decoration: underline;">–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ</a> ‚Äî –æ–±—ä—è—Å–Ω—è—é –≤—Å—ë –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö  
üß† <a href="/triangle-similarity-brainrot" style="color: #10b981; text-decoration: underline;">–ê –º–æ–∂–Ω–æ –∏ ¬´brainrot¬ª-–≤–∏–¥–µ–æ</a>, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è —É—á–∏—Ç—å—Å—è –ø–æ–¥ –º–µ–º—á–∏–∫–∏ üòè  
‚úçÔ∏è <a href="/practice" style="color: #10b981; text-decoration: underline;">–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö</a> ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ—Ç–æ–º –û–ì–≠-—É—Ä–æ–≤–µ–Ω—å

---

üéØ –ò, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–Ω—è** ‚Äî  
üîé <a href="/fipi-bank" style="color: #10b981; text-decoration: underline;">–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π –§–ò–ü–ò</a>  
–≠—Ç–æ —Ç–æ–ø-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –†–µ—à–∞–π —Ö–æ—Ç—è –±—ã 1‚Äì2 –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∏ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –±—É–¥–µ—à—å –Ω–∞ –≥–æ–ª–æ–≤—É –≤—ã—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö üí™

---

–ù–∞—á–Ω–∏ —Å —Ç–µ–æ—Ä–∏–∏ ‚Äî –¥–∞–ª—å—à–µ –≤—Å—ë –ø–æ–π–¥—ë—Ç –∫–∞–∫ –ø–æ –º–∞—Å–ª—É.  
–ï—Å–ª–∏ —á—Ç–æ ‚Äî —è —Ä—è–¥–æ–º üòâ
`;
      }

      const welcomeMessages = [
        {
          id: 1,
          text: welcomeMessage,
          isUser: false,
          timestamp: new Date()
        },
        {
          id: 2,
          text: recommendationMessage,
          isUser: false,
          timestamp: new Date()
        }
      ];
      
      setMessages(welcomeMessages);
    }
  }, [messages.length, userName, generalPreparedness, topicProgress, isLoading, setMessages]);

  const handleSendMessage = async (userInput: string) => {
    if (userInput.trim() === "") return;

    const newUserMessage = {
      id: messages.length + 1,
      text: userInput,
      isUser: true,
      timestamp: new Date()
    };
    
    addMessage(newUserMessage);
    setIsTyping(true);

    try {
      const aiResponse = await sendChatMessage(newUserMessage, messages, isDatabaseMode, user.id);
      addMessage(aiResponse);
    } finally {
      setIsTyping(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay: 0.1 }}
      className="h-full max-h-[800px]"
    >
      <Card className="h-full flex flex-col">
        <CardHeader className="pb-3 flex-shrink-0">
          <CardTitle className="flex items-center gap-2 text-lg">
            ü§ñ –ß–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫
          </CardTitle>
        </CardHeader>
        
        <CardContent className="flex-1 flex flex-col p-0 min-h-0">
          {/* Chat Messages Area - scrollable */}
          <div className="flex-1 overflow-hidden">
            <ChatMessages 
              messages={messages} 
              isTyping={isTyping}
            />
          </div>
          
          {/* Chat Input - always visible at bottom */}
          <div className="flex-shrink-0 border-t border-border bg-card">
            <ChatInput 
              onSendMessage={handleSendMessage} 
              isTyping={isTyping}
            />
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default ChatDock;