import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { useChatContext } from "@/contexts/ChatContext";
import CourseChatMessages from "@/components/chat/CourseChatMessages";
import ChatInput from "@/components/chat/ChatInput";
import { sendChatMessage } from "@/services/chatService";
import { useAuth } from "@/contexts/AuthContext";
import { useEffect, useState, useRef, useCallback } from "react";
import { useKaTeXInitializer } from "@/hooks/useMathJaxInitializer";
import { loadChatHistory, saveChatLog, type ChatLog } from "@/services/chatLogsService";
import { StreakDisplay } from "@/components/streak/StreakDisplay";
import { DailyTaskStory } from "@/components/DailyTaskStory";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/components/ui/use-toast";
import { generateAIHomeworkFeedback } from "@/services/homeworkAIFeedbackService";
import { type Message } from "@/contexts/ChatContext";

const OgeMath = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { messages, isTyping, isDatabaseMode, setMessages, setIsTyping, addMessage } = useChatContext();
  const userName = user?.user_metadata?.full_name || user?.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const { toast } = useToast();
  
  // State for chat history pagination
  const [isLoadingHistory, setIsLoadingHistory] = useState(false);
  const [historyOffset, setHistoryOffset] = useState(0);
  const [hasMoreHistory, setHasMoreHistory] = useState(true);
  const [isHistoryLoaded, setIsHistoryLoaded] = useState(false);
  
  // Initialize KaTeX
  useKaTeXInitializer();

  // Load initial chat history and welcome messages
  useEffect(() => {
    const loadInitialHistory = async () => {
      if (user && !isHistoryLoaded) {
        // Check for homework completion data
        const homeworkData = localStorage.getItem('homeworkCompletionData');
        const textbookData = localStorage.getItem('textbookExerciseCompletionData');
        let shouldGenerateHomeworkFeedback = false;
        let homeworkFeedbackMessage = '';

        if (homeworkData) {
          try {
            console.log('üìã Homework completion data found in localStorage:', homeworkData);
            const completionData = JSON.parse(homeworkData);
            console.log('‚úÖ Parsed completion data:', completionData);
            
            if (!completionData.homeworkName) {
              console.error('‚ùå No homeworkName in completion data');
              localStorage.removeItem('homeworkCompletionData');
              throw new Error('Missing homeworkName in homework completion data');
            }

            // Query all records for this homework by homework_name
            console.log('üîç Querying homework_progress for homework_name:', completionData.homeworkName);
            const { data: sessionRows, error } = await supabase
              .from('homework_progress')
              .select('*')
              .eq('user_id', user.id)
              .eq('homework_name', completionData.homeworkName)
              .order('created_at', { ascending: true });
        
            if (error) {
              console.error('‚ùå Database error fetching session:', error);
              throw error;
            }
        
            console.log(`üìä Found ${sessionRows?.length || 0} records for session`);
            
            if (sessionRows && sessionRows.length > 0) {
              // Show loading toast
              toast({
                title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
                description: "–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ...",
              });

              console.log('ü§ñ Generating AI feedback for session data...');
              // Generate AI feedback from the session data
              homeworkFeedbackMessage = await generateAIHomeworkFeedback(sessionRows);
              console.log('‚ú® AI feedback generated successfully');
              shouldGenerateHomeworkFeedback = true;
        
              // prevent duplicate feedback on next open
              localStorage.removeItem('homeworkCompletionData');
            } else {
              console.warn('‚ö†Ô∏è No rows found for session');
              localStorage.removeItem('homeworkCompletionData');
            }
          } catch (err) {
            console.error('‚ùå Error processing homework completion data:', err);
            toast({
              title: "–û—à–∏–±–∫–∞",
              description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –î–ó",
              variant: "destructive",
            });
            localStorage.removeItem('homeworkCompletionData');
          }
        

        } else if (textbookData) {
          try {
            const completionData = JSON.parse(textbookData);
            // Generate feedback for textbook exercise
            const activityTypeRu = completionData.activityType === 'exam' ? '—ç–∫–∑–∞–º–µ–Ω' : 
                                   completionData.activityType === 'test' ? '—Ç–µ—Å—Ç' : '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ';
            
            homeworkFeedbackMessage = `**${activityTypeRu.toUpperCase()}: ${completionData.activityName}**\n\n` +
              `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${completionData.questionsCorrect} –∏–∑ ${completionData.totalQuestions}\n` +
              `üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${completionData.accuracy}%\n` +
              `üéØ –ù–∞–≤—ã–∫–∏: #${completionData.skills.join(', #')}\n\n` +
              (completionData.accuracy >= 75 ? 
                'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã —Ö–æ—Ä–æ—à–æ –æ—Å–≤–æ–∏–ª —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª.' : 
                completionData.accuracy >= 50 ? 
                'üëç –ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.' : 
                'üí™ –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! –ò–∑—É—á–∏ —Ç–µ–æ—Ä–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
            
            shouldGenerateHomeworkFeedback = true;
            
            // Clear the stored data to avoid repeated feedback
            localStorage.removeItem('textbookExerciseCompletionData');
          } catch (error) {
            console.error('Error processing textbook exercise data:', error);
            localStorage.removeItem('textbookExerciseCompletionData');
          }
        }

        try {
          const history = await loadChatHistory('1', 3, 0);
          let initialMessages = [];

          if (shouldGenerateHomeworkFeedback) {
            // Add homework feedback as the first message with special formatting
            initialMessages = [
              {
                id: 1,
                text: `üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è**\n\n${homeworkFeedbackMessage}`,
                isUser: false,
                timestamp: new Date()
              }
            ];

            // Save the homework feedback to chat logs with context
            await saveChatLog('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ò–ò —É—á–∏—Ç–µ–ª—è', `üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è**\n\n${homeworkFeedbackMessage}`, '1');
          }

          if (history.length > 0) {
            // Convert chat logs to messages format and reverse to show chronologically
            const historyMessages = history.reverse().flatMap((log, index) => [
              {
                id: (index + initialMessages.length) * 2 + 1,
                text: log.user_message,
                isUser: true,
                timestamp: new Date(log.time_of_user_message)
              },
              {
                id: (index + initialMessages.length) * 2 + 2,
                text: log.response,
                isUser: false,
                timestamp: new Date(log.time_of_response)
              }
            ]);
            
            setMessages([...initialMessages, ...historyMessages]);
            setHistoryOffset(3);
            setHasMoreHistory(history.length === 3);
          } else {
            // Set welcome messages if no history
            const welcomeMessages = [
              {
                id: initialMessages.length + 1,
                text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø —Ç–≤–æ–π –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É!`,
                isUser: false,
                timestamp: new Date()
              },
              {
                id: initialMessages.length + 2,
                text: "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É?",
                isUser: false,
                timestamp: new Date()
              }
            ];
            
            setMessages([...initialMessages, ...welcomeMessages]);
            setHasMoreHistory(false);
          }
          setIsHistoryLoaded(true);
        } catch (error) {
          console.error('Error loading chat history:', error);
          // Fallback to welcome messages
          const fallbackMessages = shouldGenerateHomeworkFeedback ? [
            {
              id: 1,
              text: homeworkFeedbackMessage,
              isUser: false,
              timestamp: new Date()
            },
            {
              id: 2,
              text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø —Ç–≤–æ–π –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É!`,
              isUser: false,
              timestamp: new Date()
            }
          ] : [
            {
              id: 1,
              text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø —Ç–≤–æ–π –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É!`,
              isUser: false,
              timestamp: new Date()
            },
            {
              id: 2,
              text: "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É?",
              isUser: false,
              timestamp: new Date()
            }
          ];
          
          setMessages(fallbackMessages);
          setIsHistoryLoaded(true);
          setHasMoreHistory(false);
        }
      }
    };

    loadInitialHistory();
  }, [user, userName, setMessages, isHistoryLoaded]);

  // Create a ref to store the addMessage function to avoid subscription recreation
  const addMessageRef = useRef(addMessage);
  addMessageRef.current = addMessage;

  // Set up real-time subscription for new chat messages
  useEffect(() => {
    if (!user) return;
    
    const channel = supabase
      .channel('chat_logs_realtime')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'chat_logs',
          filter: `user_id=eq.${user.id}&course_id=eq.1`
        },
        (payload) => {
          console.log('New chat log received:', payload);
          const newLog = payload.new as any;
          
          // Check if this is a homework feedback message (generic completion message)
          const isHomeworkFeedback = newLog.user_message === '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ò–ò —É—á–∏—Ç–µ–ª—è';
          
          if (isHomeworkFeedback) {
            // For homework feedback, only add the AI response
            addMessageRef.current({
              id: Date.now(),
              text: newLog.response,
              isUser: false,
              timestamp: new Date(newLog.time_of_response)
            });
          } else {
            // For regular chat messages, add both user and AI messages
            addMessageRef.current({
              id: Date.now() * 2 + 1,
              text: newLog.user_message,
              isUser: true,
              timestamp: new Date(newLog.time_of_user_message)
            });
            
            addMessageRef.current({
              id: Date.now() * 2 + 2,
              text: newLog.response,
              isUser: false,
              timestamp: new Date(newLog.time_of_response)
            });
          }
        }
      )
      .subscribe((status) => {
        console.log('Chat realtime subscription status:', status);
      });

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user]);

  const loadMoreHistory = async () => {
    if (!hasMoreHistory || isLoadingHistory) return;
    
    setIsLoadingHistory(true);
    try {
      const history = await loadChatHistory('1', 3, historyOffset);
      if (history.length > 0) {
        // Convert chat logs to messages format and reverse to show chronologically
        const historyMessages = history.reverse().flatMap((log, index) => [
          {
            id: (historyOffset + index) * 2 + 1,
            text: log.user_message,
            isUser: true,
            timestamp: new Date(log.time_of_user_message)
          },
          {
            id: (historyOffset + index) * 2 + 2,
            text: log.response,
            isUser: false,
            timestamp: new Date(log.time_of_response)
          }
        ]);
        
        // Prepend history messages to current messages
        setMessages([...historyMessages, ...messages]);
        setHistoryOffset(prev => prev + 3);
        setHasMoreHistory(history.length === 3);
      } else {
        setHasMoreHistory(false);
      }
    } catch (error) {
      console.error('Error loading more history:', error);
      setHasMoreHistory(false);
    } finally {
      setIsLoadingHistory(false);
    }
  };

  const handleSendMessage = async (userInput: string) => {
    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      text: userInput,
      isUser: true,
      timestamp: new Date()
    };
    
    addMessage(newUserMessage);
    setIsTyping(true);

    try {
      // Send message to AI and get response
      const aiResponse = await sendChatMessage(newUserMessage, messages, isDatabaseMode);
      addMessage(aiResponse);
      
      // Save chat interaction to database
      await saveChatLog(userInput, aiResponse.text, '1');
    } catch (error) {
      console.error('Error saving chat log:', error);
    } finally {
      setIsTyping(false);
    }
  };

  const handleNavigateToProfile = () => {
    navigate("/mydashboard");
  };

  const handlePracticeClick = () => {
    navigate("/ogemath-practice");
  };

  const handleTextbookClick = () => {
    navigate("/learning-platform");
  };

  const handleProgressClick = () => {
    navigate("/ogemath-progress2");
  };

  const handleCreateTask = async () => {
    if (!user) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
        variant: "destructive",
      });
      return;
    }

    try {
      const { data, error } = await supabase.functions.invoke('create-task', {
        body: { user_id: user.id }
      });

      if (error) throw error;

      toast({
        title: "–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
        description: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
      });
    } catch (error) {
      console.error('Error creating task:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex h-screen w-full bg-background">
      {/* Left Sidebar - Fixed */}
      <div className="w-64 h-full bg-sidebar border-r border-border flex-shrink-0">
        {/* Logo area */}
        <div className="p-4">
          <button 
            onClick={() => navigate("/mydb3")}
            className="flex items-center space-x-3 hover:opacity-80 transition-opacity"
          >
            <img 
              src="https://kbaazksvkvnafrwtmkcw.supabase.co/storage/v1/object/public/txtbkimg/1001egechat_logo.png" 
              alt="EGEChat Logo" 
              className="w-8 h-8"
            />
            <span className="font-bold text-lg text-sidebar-foreground">EGEChat</span>
          </button>
        </div>
        
        {/* Menu items */}
        <div className="p-4 space-y-2">
          <Button
            onClick={handlePracticeClick}
            variant="ghost"
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
          >
            –ü—Ä–∞–∫—Ç–∏–∫–∞
          </Button>
          
          <Button
            onClick={handleTextbookClick}
            variant="ghost"
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
          >
            –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
          </Button>
          
          <Button
            onClick={handleProgressClick}
            variant="ghost"
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
          >
            –ü—Ä–æ–≥—Ä–µ—Å—Å
          </Button>
          
          <Button
            onClick={handleCreateTask}
            variant="ghost"
            className="w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"
          >
            –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
          </Button>
        </div>

        {/* Daily Task Story - 2 inches below Progress button */}
        <div className="px-4 mt-[144px]">
          <DailyTaskStory />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col h-full">
        {/* Header */}
        <div className="h-14 border-b border-border bg-background flex items-center justify-between px-4">
          <h1 className="text-xl font-semibold">–û–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</h1>
          {user && <StreakDisplay />}
        </div>

        {/* Chat Messages Area - Scrollable */}
        <div className="flex-1 overflow-hidden">
          <CourseChatMessages 
            messages={messages} 
            isTyping={isTyping} 
            onLoadMoreHistory={loadMoreHistory}
            isLoadingHistory={isLoadingHistory}
            hasMoreHistory={hasMoreHistory}
          />
        </div>

        {/* Chat Input Area - Fixed at bottom */}
        <div className="border-t border-border bg-background p-4">
          <div className="max-w-4xl mx-auto">
            <ChatInput onSendMessage={handleSendMessage} isTyping={isTyping} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default OgeMath;
