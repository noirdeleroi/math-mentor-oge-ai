import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Plus, LogOut } from 'lucide-react';
import { Sidebar } from '@/components/mydb3/Sidebar';
import { UserInfoStripe } from '@/components/mydb3/UserInfoStripe';
import { CourseTreeCard } from '@/components/mydb3/CourseTreeCard';
import { CourseSelectionModal } from '@/components/mydb3/CourseSelectionModal';
import { CourseOnboardingWizard } from '@/components/mydb3/CourseOnboardingWizard';
import { useDashboardLogic } from '@/hooks/useDashboardLogic';
import { COURSES, CourseId, courseIdToNumber } from '@/lib/courses.registry';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

const MyDb3 = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'add' | 'delete'>('add');
  const [wizardQueue, setWizardQueue] = useState<CourseId[]>([]);
  const [currentWizardCourse, setCurrentWizardCourse] = useState<CourseId | null>(null);
  
  const {
    myCourses,
    handleAddCourse,
    handleStartCourse,
  } = useDashboardLogic();

  const { signOut } = useAuth();

  // Convert user courses to our registry format
  const enrolledCourses = myCourses.map(course => COURSES[course.id as CourseId]).filter(Boolean);
  const enrolledCourseIds = enrolledCourses.map(course => course.id);

  const handleOpenAddModal = () => {
    setModalMode('add');
    setIsModalOpen(true);
  };

  const handleOpenDeleteModal = () => {
    setModalMode('delete');
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleAddCourses = async (courseIds: CourseId[]) => {
    const welcomeMessage = `**–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

–≠—Ç–æ —Ç–≤–æ–π –í–æ—Ä–∫—Å–ø–µ–π—Å: –∑–¥–µ—Å—å –µ—Å—Ç—å —á–∞—Ç –¥–ª—è –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º. –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è:

üìò **1. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–∞–∫—Ç–∏–∫–∞"**
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º, –∫–∞–∫ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ.
–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã:

* **–ü—Ä–æ–±–Ω—ã–π –≠–∫–∑–∞–º–µ–Ω** ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π;
* **–î–æ–º–∞—à–Ω–µ–µ –ó–∞–¥–∞–Ω–∏–µ** ‚Äî –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è —Ç–µ–±—è;
* **–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ** ‚Äî –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º, –≥–¥–µ —É —Ç–µ–±—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏.

üìö **2. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"**
–¢—É—Ç —Å–æ–±—Ä–∞–Ω–∞ —Ç–µ–æ—Ä–∏—è, –∑–∞–¥–∞—á–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ **–£—á–µ–±–Ω–∏–∫**. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–∞—Ö –≥–ª—É–±–∂–µ.

üìä **3. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å"**
–ó–¥–µ—Å—å —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ–π —É—Å–ø–µ—Ö –ø–æ —Ç–µ–º–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º –∑–∞–¥–∞—á.
–ù–∞–∂–º–∏ **"–û–±–Ω–æ–≤–∏—Ç—å –ü—Ä–æ–≥—Ä–µ—Å—Å"**, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.

üìù **4. –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ó–∞–¥–∞–Ω–∏–µ"**
–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

üí° **5. –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –≤—ã–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç (–≤ —É—á–µ–±–Ω–∏–∫–µ, –≤ –∑–∞–¥–∞—á–µ, –≥–¥–µ —É–≥–æ–¥–Ω–æ) –∏ –Ω–∞–∂–º–∏ **"–í–∫–ª—é—á–∏—Ç—å –í—ã–¥–µ–ª–µ–Ω–∏–µ"**. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ä–∞–∑—É –æ–±—ä—è—Å–Ω–∏—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

‚úÖ **6. –ü–æ–¥–∫–ª—é—á–∏ Telegram-–±–æ—Ç–∞!**
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram-–±–æ—Ç–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

**–ù–∞—á–∏–Ω–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –¢—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–≤—ã–∫–Ω–µ—à—å –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –∏ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—â–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!**
**–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ª–µ–≥–∫–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!**`;

    // First, enroll courses in database
    for (const courseId of courseIds) {
      const courseNumber = courseIdToNumber[courseId];
      
      // Get current courses from profiles
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data: profile } = await supabase
        .from('profiles')
        .select('courses')
        .eq('user_id', user.id)
        .single();

      const currentCourseNumbers = profile?.courses || [];
      const newCourseNumbers = [...currentCourseNumbers, courseNumber];
      
      // Update database
      await supabase
        .from('profiles')
        .update({ courses: newCourseNumbers })
        .eq('user_id', user.id);

      // Initialize priors for the course
      try {
        await supabase.functions.invoke('initialize-priors', {
          body: { 
            user_id: user.id,
            course_id: courseNumber.toString()
          }
        });
      } catch (error) {
        console.error('Error initializing priors:', error);
      }

      // Insert welcome message into chat_logs
      try {
        await supabase.from('chat_logs').insert({
          user_id: user.id,
          course_id: courseNumber.toString(),
          user_message: '–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
          response: welcomeMessage,
          time_of_user_message: new Date().toISOString(),
          time_of_response: new Date().toISOString()
        });
      } catch (error) {
        console.error('Error inserting welcome message:', error);
      }
    }
    
    // Close modal and start wizard flow
    setIsModalOpen(false);
    setWizardQueue(courseIds);
    startNextWizard(courseIds);
  };

  const startNextWizard = (queue: CourseId[]) => {
    if (queue.length > 0) {
      const [nextCourse, ...remainingCourses] = queue;
      setCurrentWizardCourse(nextCourse);
      setWizardQueue(remainingCourses);
    }
  };

  const handleWizardDone = () => {
    setCurrentWizardCourse(null);
    
    if (wizardQueue.length > 0) {
      // Start next wizard
      startNextWizard(wizardQueue);
    } else {
      // All wizards complete, refresh page
      window.location.reload();
    }
  };

  const handleWizardError = () => {
    // For now, continue to next wizard even on error
    handleWizardDone();
  };

  const handleDeleteCourses = async (courseIds: CourseId[]) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Call the database function for each course using numeric course IDs
      for (const courseId of courseIds) {
        const numericCourseId = courseIdToNumber[courseId].toString();
        const { error } = await supabase.rpc('delete_course_data', {
          p_user_id: user.id,
          p_course_id: numericCourseId
        });
        
        if (error) {
          console.error('Error deleting course data:', error);
        }
      }
      
      // Refresh the page data
      window.location.reload();
    } catch (error) {
      console.error('Error in handleDeleteCourses:', error);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="flex">
        {/* Sidebar */}
        <Sidebar />
        
        {/* Main Content */}
        <div className="flex-1 p-6">
          {/* User Info Stripe */}
          <UserInfoStripe />
          
          {/* My Courses Section */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold">–ú–æ–∏ –∫—É—Ä—Å—ã</h1>
              <Button 
                onClick={handleOpenDeleteModal}
                className="bg-black hover:bg-gradient-to-r hover:from-yellow-500 hover:to-emerald-500 hover:shadow-lg text-white"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã
              </Button>
            </div>

            {enrolledCourses.length === 0 ? (
              /* No courses - show empty state with large plus button */
              <div className="text-center py-16">
                <div className="mb-8">
                    <Button
                      onClick={handleOpenAddModal}
                      variant="outline"
                      size="lg"
                      className="w-32 h-32 rounded-full border-2 border-dashed border-yellow-500/30 hover:border-yellow-500 hover:bg-yellow-500/5 transition-all duration-200"
                    >
                      <Plus className="w-12 h-12 text-yellow-600" />
                    </Button>
                </div>
                <p className="text-muted-foreground text-lg">–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å</p>
              </div>
            ) : (
              /* Has courses - show course grid with add button */
              <div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {enrolledCourses.map((course) => (
                    <CourseTreeCard
                      key={course.id}
                      course={course}
                      onStart={handleStartCourse}
                    />
                  ))}
                  
                  {/* Add course card */}
                  <div className="flex items-center justify-center min-h-[300px] border-2 border-dashed border-muted-foreground/20 rounded-lg">
                  <div className="text-center">
                    <Button
                      onClick={handleOpenAddModal}
                      variant="outline"
                      size="lg"
                      className="w-20 h-20 rounded-full border-2 border-dashed border-yellow-500/30 hover:border-yellow-500 hover:bg-yellow-500/5 transition-all duration-200 mb-4"
                    >
                      <Plus className="w-8 h-8 text-yellow-600" />
                    </Button>
                    <p className="text-muted-foreground">–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å</p>
                  </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Course Selection Modal */}
      <CourseSelectionModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onAddCourses={handleAddCourses}
        onDeleteCourses={handleDeleteCourses}
        enrolledCourseIds={enrolledCourseIds}
        mode={modalMode}
      />

      {/* Course Onboarding Wizard */}
      {currentWizardCourse && (
        <CourseOnboardingWizard
          courseId={currentWizardCourse}
          onDone={handleWizardDone}
          onError={handleWizardError}
        />
      )}
    </div>
  );
};

export default MyDb3;