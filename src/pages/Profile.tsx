import { useNavigate } from 'react-router-dom';
import Header from "@/components/Header";
import { useAuth } from "@/contexts/AuthContext";
import { UserProfileCard } from "@/components/profile/UserProfileCard";
import { ProfileTabs } from "@/components/profile/ProfileTabs";
import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { sendChatMessage } from "@/services/chatService";
import { useChatContext } from "@/contexts/ChatContext";
import { useStudentSkills } from "@/hooks/useStudentSkills";
import { useOptimizedProfile } from "@/hooks/useOptimizedProfile";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

export interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  problemId?: string;
}


const PLATFORM_GUIDE_MD = `
–≠—Ç–æ —Ç–≤–æ–π –í–æ—Ä–∫—Å–ø–µ–π—Å: –∑–¥–µ—Å—å –µ—Å—Ç—å —á–∞—Ç –¥–ª—è –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º. –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è:

üß© **1. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–∞–∫—Ç–∏–∫–∞"**
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º, –∫–∞–∫ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ.
–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã:

* **–ü—Ä–æ–±–Ω—ã–π –≠–∫–∑–∞–º–µ–Ω** ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π;
* **–î–æ–º–∞—à–Ω–µ–µ –ó–∞–¥–∞–Ω–∏–µ** ‚Äî –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è —Ç–µ–±—è;
* **–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ** ‚Äî –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º, –≥–¥–µ —É —Ç–µ–±—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏.

üè´ **2. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"**
–¢—É—Ç —Å–æ–±—Ä–∞–Ω–∞ —Ç–µ–æ—Ä–∏—è, –∑–∞–¥–∞—á–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ **üìñ –£—á–µ–±–Ω–∏–∫**. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–∞—Ö –≥–ª—É–±–∂–µ.

üìä **3. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å"**
–ó–¥–µ—Å—å —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ–π —É—Å–ø–µ—Ö –ø–æ —Ç–µ–º–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º –∑–∞–¥–∞—á.
–ù–∞–∂–º–∏ **"–û–±–Ω–æ–≤–∏—Ç—å –ü—Ä–æ–≥—Ä–µ—Å—Å"**, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.

üìù **4. –¢–≤–æ–π –ò–ò-—É—á–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å**
–ü–æ—Å–ª–µ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò-—É—á–∏—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.

üî≠ **5. –ì–¥–µ –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ**
–ó–∞–π–¥–∏ –≤ —Å—Ç–æ—Ä–∏—Å c –∞–≤–∞—Ç–∞—Ä–∫–æ–π —Ç–≤–æ–µ–≥–æ –ò–ò-—É—á–∏—Ç–µ–ª—è. –¢–∞–º —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–Ω–æ–ø–∫–∏ ¬´–£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª –∏ ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é¬ª.

üñçÔ∏è **6. –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–∂–º–∏ **"–í–∫–ª—é—á–∏—Ç—å –í—ã–¥–µ–ª–µ–Ω–∏–µ"** –∏ –≤—ã–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç (–≤ —É—á–µ–±–Ω–∏–∫–µ, –≤ –∑–∞–¥–∞—á–µ, –≥–¥–µ —É–≥–æ–¥–Ω–æ). –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ä–∞–∑—É –æ–±—ä—è—Å–Ω–∏—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

üíô **7. –ü–æ–¥–∫–ª—é—á–∏ Telegram-–±–æ—Ç–∞!**
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram-–±–æ—Ç–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

**–ù–∞—á–∏–Ω–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –¢—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–≤—ã–∫–Ω–µ—à—å –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –∏ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—â–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!**
**–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ª–µ–≥–∫–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!**
`;



const Profile = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { messages, isTyping, isDatabaseMode, setMessages, setIsTyping, addMessage } = useChatContext();
  const { topicProgress, generalPreparedness, isLoading: skillsLoading } = useStudentSkills();
  
  // Use optimized hook for all profile data (consolidates multiple queries)
  const {
    profile,
    streak,
    statistics,
    isLoading: profileLoading,
    getDisplayName,
    getLastActivityText,
  } = useOptimizedProfile();
  
  const { toast } = useToast();
  const [isGeneratingCode, setIsGeneratingCode] = useState(false);
  
  // Extract user information from Supabase user data and profile
  const userName = getDisplayName();
  const userEmail = user?.email || '';
  const joinedDate = new Date(user?.created_at || Date.now()).toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
  const lastActivityDate = getLastActivityText();

  const generateTelegramCode = async () => {
    if (!user || !profile) return;

    setIsGeneratingCode(true);
    // Generate random 6-digit number
    const randomCode = Math.floor(100000 + Math.random() * 900000);

    try {
      const { error } = await supabase
        .from('profiles')
        .update({ telegram_code: randomCode })
        .eq('user_id', user.id);

      if (error) {
        console.error('Error saving telegram code:', error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –∫–æ–¥",
          variant: "destructive",
        });
        return;
      }

      // Update local state (optimized hook will refetch on next mount)
      toast({
        title: "Telegram –∫–æ–¥ —Å–æ–∑–¥–∞–Ω",
        description: "–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        duration: 2000,
      });
    } catch (error) {
      console.error('Error creating telegram code:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –∫–æ–¥",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingCode(false);
    }
  };

  // Initialize welcome message if chat is empty
  useEffect(() => {
    if (messages.length === 0) {
      setMessages([{
        id: 1,
        text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?`,
        isUser: false,
        timestamp: new Date()
      }]);
    }
  }, [messages.length, userName, setMessages]);
  
  const handleSendMessage = async (userInput: string) => {
    if (userInput.trim() === "") return;

    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      text: userInput,
      isUser: true,
      timestamp: new Date()
    };
    
    addMessage(newUserMessage);
    setIsTyping(true);

    try {
      // Send message to AI and get response using Groq API
      const aiResponse = await sendChatMessage(newUserMessage, messages, isDatabaseMode);
      addMessage(aiResponse);
    } finally {
      setIsTyping(false);
    }
  };
  
  // Create progress data from topic progress
  const progressData = {
    overall: generalPreparedness,
    algebra: topicProgress.find(t => t.topic === "2")?.averageScore || 0,
    geometry: topicProgress.find(t => t.topic === "7")?.averageScore || 0,
    probability: topicProgress.find(t => t.topic === "8")?.averageScore || 0
  };

  const userData = {
    progress: progressData,
    topicProgress: topicProgress,
    completedLessons: statistics?.completed_lessons || 0,
    practiceProblems: statistics?.practice_problems || 0,
    quizzesCompleted: statistics?.quizzes_completed || 0,
    averageScore: Math.round(statistics?.average_score || 0),
    streakDays: streak?.current_streak || 0,
    achievements: [
      { id: 1, name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", description: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 5 —É—Ä–æ–∫–æ–≤", date: "15 –º–∞—Ä—Ç–∞ 2025", completed: (statistics?.completed_lessons || 0) >= 5 },
      { id: 2, name: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π", description: "–†–µ—à–µ–Ω–æ 100+ –∑–∞–¥–∞—á", date: "2 –∞–ø—Ä–µ–ª—è 2025", completed: (statistics?.practice_problems || 0) >= 100 },
      { id: 3, name: "–ù–∞ –æ—Ç–ª–∏—á–Ω–æ", description: "–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ 90% –∏–ª–∏ –≤—ã—à–µ –Ω–∞ 5 —Ç–µ—Å—Ç–∞—Ö –ø–æ–¥—Ä—è–¥", date: "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ", completed: (statistics?.average_score || 0) >= 90 && (statistics?.quizzes_completed || 0) >= 5 },
      { id: 4, name: "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–∞—Å—Ç–µ—Ä", description: "–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ —Ç–µ–º—ã –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏", date: "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ", completed: (topicProgress.find(t => t.topic === "7")?.averageScore || 0) >= 80 }
    ],
    recentActivity: [
      { date: "9 –º–∞—è 2025", activity: "–ó–∞–≤–µ—Ä—à–µ–Ω —É—Ä–æ–∫: –ü–æ–¥–æ–±–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤", type: "lesson" },
      { date: "8 –º–∞—è 2025", activity: "–†–µ—à–µ–Ω–æ 12 –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–µ '–§—É–Ω–∫—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏'", type: "practice" },
      { date: "7 –º–∞—è 2025", activity: "–ü—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç: –£—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ (89%)", type: "quiz" },
      { date: "5 –º–∞—è 2025", activity: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –≤–∏–¥–µ–æ—É—Ä–æ–∫: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", type: "video" }
    ]
  };

  if (skillsLoading || profileLoading) {
    return (
      <div className="h-screen bg-gray-50 flex flex-col overflow-hidden">
        <Header />
        <main className="flex-1 pt-16 flex items-center justify-center overflow-auto">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      <main className="flex-1 pt-16 flex flex-col overflow-hidden">
        <div className="flex-1 container mx-auto px-4 py-4 overflow-auto">
          <ProfileTabs 
            userData={userData}
            userName={userName}
            userEmail={userEmail}
            joinedDate={joinedDate}
            lastActivityDate={lastActivityDate}
          />
        </div>
      </main>
    </div>
  );
};

export default Profile;
